/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace Checkpoints {
      
    export type Checkpoint208Struct = {_key: BigNumberish, _value: BigNumberish}

    export type Checkpoint208StructOutput = [_key: bigint, _value: bigint] & {_key: bigint, _value: bigint }
  
    }

  export interface GovernanceTokenInterface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "COMMUNITY_ALLOCATION" | "DOMAIN_SEPARATOR" | "MAX_SUPPLY" | "TEAM_ALLOCATION" | "TREASURY_ALLOCATION" | "allowance" | "approve" | "balanceOf" | "burn" | "checkpoints" | "clock" | "decimals" | "delegate" | "delegateBySig" | "delegates" | "eip712Domain" | "getPastTotalSupply" | "getPastVotes" | "getPastVotingPower" | "getVotes" | "getVotingPower" | "name" | "nonces" | "numCheckpoints" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "treasury"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "DelegateChanged" | "DelegateVotesChanged" | "EIP712DomainChanged" | "TokensBurned" | "TokensMinted" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'CLOCK_MODE', values?: undefined): string;
encodeFunctionData(functionFragment: 'COMMUNITY_ALLOCATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_SUPPLY', values?: undefined): string;
encodeFunctionData(functionFragment: 'TEAM_ALLOCATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'TREASURY_ALLOCATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'checkpoints', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'clock', values?: undefined): string;
encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'delegate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'delegateBySig', values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'delegates', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPastTotalSupply', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPastVotes', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPastVotingPower', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getVotes', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getVotingPower', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'nonces', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'numCheckpoints', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'permit', values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'CLOCK_MODE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'COMMUNITY_ALLOCATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_SUPPLY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TEAM_ALLOCATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TREASURY_ALLOCATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'clock', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPastTotalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPastVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPastVotingPower', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVotingPower', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DelegateChangedEvent {
      export type InputTuple = [delegator: AddressLike, fromDelegate: AddressLike, toDelegate: AddressLike];
      export type OutputTuple = [delegator: string, fromDelegate: string, toDelegate: string];
      export interface OutputObject {delegator: string, fromDelegate: string, toDelegate: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DelegateVotesChangedEvent {
      export type InputTuple = [delegate: AddressLike, previousVotes: BigNumberish, newVotes: BigNumberish];
      export type OutputTuple = [delegate: string, previousVotes: bigint, newVotes: bigint];
      export interface OutputObject {delegate: string, previousVotes: bigint, newVotes: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EIP712DomainChangedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensBurnedEvent {
      export type InputTuple = [from: AddressLike, amount: BigNumberish];
      export type OutputTuple = [from: string, amount: bigint];
      export interface OutputObject {from: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensMintedEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish, reason: string];
      export type OutputTuple = [to: string, amount: bigint, reason: string];
      export interface OutputObject {to: string, amount: bigint, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface GovernanceToken extends BaseContract {
    
    connect(runner?: ContractRunner | null): GovernanceToken;
    waitForDeployment(): Promise<this>;

    interface: GovernanceTokenInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CLOCK_MODE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    COMMUNITY_ALLOCATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    DOMAIN_SEPARATOR: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    MAX_SUPPLY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    TEAM_ALLOCATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    TREASURY_ALLOCATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    burn: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    checkpoints: TypedContractMethod<
      [account: AddressLike, pos: BigNumberish, ],
      [Checkpoints.Checkpoint208StructOutput],
      'view'
    >
    

    
    clock: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    decimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    delegate: TypedContractMethod<
      [delegatee: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    delegateBySig: TypedContractMethod<
      [delegatee: AddressLike, nonce: BigNumberish, expiry: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    delegates: TypedContractMethod<
      [account: AddressLike, ],
      [string],
      'view'
    >
    

    
    eip712Domain: TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >
    

    
    getPastTotalSupply: TypedContractMethod<
      [timepoint: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getPastVotes: TypedContractMethod<
      [account: AddressLike, timepoint: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getPastVotingPower: TypedContractMethod<
      [account: AddressLike, timepoint: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getVotes: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getVotingPower: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    nonces: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    numCheckpoints: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    permit: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    treasury: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CLOCK_MODE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'COMMUNITY_ALLOCATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'DOMAIN_SEPARATOR'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_SUPPLY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'TEAM_ALLOCATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'TREASURY_ALLOCATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'burn'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'checkpoints'): TypedContractMethod<
      [account: AddressLike, pos: BigNumberish, ],
      [Checkpoints.Checkpoint208StructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'clock'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'decimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'delegate'): TypedContractMethod<
      [delegatee: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'delegateBySig'): TypedContractMethod<
      [delegatee: AddressLike, nonce: BigNumberish, expiry: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'delegates'): TypedContractMethod<
      [account: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'eip712Domain'): TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'getPastTotalSupply'): TypedContractMethod<
      [timepoint: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPastVotes'): TypedContractMethod<
      [account: AddressLike, timepoint: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPastVotingPower'): TypedContractMethod<
      [account: AddressLike, timepoint: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVotes'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVotingPower'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nonces'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'numCheckpoints'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'permit'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'treasury'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'DelegateChanged'): TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
getEvent(key: 'DelegateVotesChanged'): TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
getEvent(key: 'EIP712DomainChanged'): TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
getEvent(key: 'TokensBurned'): TypedContractEvent<TokensBurnedEvent.InputTuple, TokensBurnedEvent.OutputTuple, TokensBurnedEvent.OutputObject>;
getEvent(key: 'TokensMinted'): TypedContractEvent<TokensMintedEvent.InputTuple, TokensMintedEvent.OutputTuple, TokensMintedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'DelegateChanged(address,address,address)': TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
      DelegateChanged: TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
    

      'DelegateVotesChanged(address,uint256,uint256)': TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
      DelegateVotesChanged: TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
    

      'EIP712DomainChanged()': TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
      EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
    

      'TokensBurned(address,uint256)': TypedContractEvent<TokensBurnedEvent.InputTuple, TokensBurnedEvent.OutputTuple, TokensBurnedEvent.OutputObject>;
      TokensBurned: TypedContractEvent<TokensBurnedEvent.InputTuple, TokensBurnedEvent.OutputTuple, TokensBurnedEvent.OutputObject>;
    

      'TokensMinted(address,uint256,string)': TypedContractEvent<TokensMintedEvent.InputTuple, TokensMintedEvent.OutputTuple, TokensMintedEvent.OutputObject>;
      TokensMinted: TypedContractEvent<TokensMintedEvent.InputTuple, TokensMintedEvent.OutputTuple, TokensMintedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }