/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CircuitBreakerInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "GOVERNANCE_ROLE" | "GUARDIAN_ROLE" | "addGuardian" | "automaticUnpauseDelay" | "blockStats" | "circuitBrokenAt" | "communityOverride" | "createPauseProposal" | "executeAutomaticUnpause" | "getCircuitStatus" | "getGuardianCount" | "getRoleAdmin" | "getRoleMember" | "getRoleMemberCount" | "getRoleMembers" | "grantRole" | "guardiansRequired" | "hasRole" | "isCircuitBroken" | "maxFailedTransactionsRatio" | "maxTransactionsPerBlock" | "pauseProposalCounter" | "pauseProposals" | "recordTransaction" | "removeGuardian" | "renounceRole" | "revokeRole" | "shouldAutomaticUnpause" | "supportsInterface" | "updateAnomalyParameters" | "updateAutomaticUnpauseDelay" | "voteOnPauseProposal"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AnomalyDetected" | "CircuitBreakerReset" | "CircuitBreakerTriggered" | "CommunityOverride" | "GuardianAdded" | "GuardianRemoved" | "PauseProposalCreated" | "PauseProposalExecuted" | "PauseProposalVoted" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'GOVERNANCE_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addGuardian', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'automaticUnpauseDelay', values?: undefined): string;
encodeFunctionData(functionFragment: 'blockStats', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'circuitBrokenAt', values?: undefined): string;
encodeFunctionData(functionFragment: 'communityOverride', values?: undefined): string;
encodeFunctionData(functionFragment: 'createPauseProposal', values: [string, boolean]): string;
encodeFunctionData(functionFragment: 'executeAutomaticUnpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCircuitStatus', values?: undefined): string;
encodeFunctionData(functionFragment: 'getGuardianCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getRoleMembers', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'guardiansRequired', values?: undefined): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isCircuitBroken', values?: undefined): string;
encodeFunctionData(functionFragment: 'maxFailedTransactionsRatio', values?: undefined): string;
encodeFunctionData(functionFragment: 'maxTransactionsPerBlock', values?: undefined): string;
encodeFunctionData(functionFragment: 'pauseProposalCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'pauseProposals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'recordTransaction', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'removeGuardian', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'shouldAutomaticUnpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'updateAnomalyParameters', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateAutomaticUnpauseDelay', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'voteOnPauseProposal', values: [BigNumberish, boolean]): string;

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'GOVERNANCE_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addGuardian', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'automaticUnpauseDelay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'blockStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'circuitBrokenAt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'communityOverride', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createPauseProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeAutomaticUnpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCircuitStatus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getGuardianCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleMembers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'guardiansRequired', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isCircuitBroken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxFailedTransactionsRatio', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxTransactionsPerBlock', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pauseProposalCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pauseProposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recordTransaction', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeGuardian', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'shouldAutomaticUnpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateAnomalyParameters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateAutomaticUnpauseDelay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteOnPauseProposal', data: BytesLike): Result;
  }

  
    export namespace AnomalyDetectedEvent {
      export type InputTuple = [blockNumber: BigNumberish, reason: string];
      export type OutputTuple = [blockNumber: bigint, reason: string];
      export interface OutputObject {blockNumber: bigint, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CircuitBreakerResetEvent {
      export type InputTuple = [resetBy: AddressLike];
      export type OutputTuple = [resetBy: string];
      export interface OutputObject {resetBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CircuitBreakerTriggeredEvent {
      export type InputTuple = [reason: string, triggeredBy: AddressLike];
      export type OutputTuple = [reason: string, triggeredBy: string];
      export interface OutputObject {reason: string, triggeredBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommunityOverrideEvent {
      export type InputTuple = [initiator: AddressLike];
      export type OutputTuple = [initiator: string];
      export interface OutputObject {initiator: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GuardianAddedEvent {
      export type InputTuple = [guardian: AddressLike];
      export type OutputTuple = [guardian: string];
      export interface OutputObject {guardian: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GuardianRemovedEvent {
      export type InputTuple = [guardian: AddressLike];
      export type OutputTuple = [guardian: string];
      export interface OutputObject {guardian: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PauseProposalCreatedEvent {
      export type InputTuple = [proposalId: BigNumberish, proposer: AddressLike, reason: string, isPause: boolean];
      export type OutputTuple = [proposalId: bigint, proposer: string, reason: string, isPause: boolean];
      export interface OutputObject {proposalId: bigint, proposer: string, reason: string, isPause: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PauseProposalExecutedEvent {
      export type InputTuple = [proposalId: BigNumberish, isPause: boolean];
      export type OutputTuple = [proposalId: bigint, isPause: boolean];
      export interface OutputObject {proposalId: bigint, isPause: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PauseProposalVotedEvent {
      export type InputTuple = [proposalId: BigNumberish, guardian: AddressLike, support: boolean];
      export type OutputTuple = [proposalId: bigint, guardian: string, support: boolean];
      export interface OutputObject {proposalId: bigint, guardian: string, support: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CircuitBreaker extends BaseContract {
    
    connect(runner?: ContractRunner | null): CircuitBreaker;
    waitForDeployment(): Promise<this>;

    interface: CircuitBreakerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    GOVERNANCE_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    GUARDIAN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addGuardian: TypedContractMethod<
      [guardian: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    automaticUnpauseDelay: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    blockStats: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint] & {transactions: bigint, failedTransactions: bigint, timestamp: bigint }],
      'view'
    >
    

    
    circuitBrokenAt: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    communityOverride: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    createPauseProposal: TypedContractMethod<
      [reason: string, isPause: boolean, ],
      [bigint],
      'nonpayable'
    >
    

    
    executeAutomaticUnpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    getCircuitStatus: TypedContractMethod<
      [],
      [[boolean, bigint, boolean] & {isBroken: boolean, brokenAt: bigint, canAutomaticUnpause: boolean }],
      'view'
    >
    

    
    getGuardianCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getRoleMember: TypedContractMethod<
      [role: BytesLike, index: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getRoleMemberCount: TypedContractMethod<
      [role: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    getRoleMembers: TypedContractMethod<
      [role: BytesLike, ],
      [string[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    guardiansRequired: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isCircuitBroken: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    maxFailedTransactionsRatio: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    maxTransactionsPerBlock: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    pauseProposalCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    pauseProposals: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, boolean, boolean] & {proposer: string, reason: string, proposedAt: bigint, votes: bigint, executed: boolean, isPause: boolean }],
      'view'
    >
    

    
    recordTransaction: TypedContractMethod<
      [blockNumber: BigNumberish, success: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    removeGuardian: TypedContractMethod<
      [guardian: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    shouldAutomaticUnpause: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    updateAnomalyParameters: TypedContractMethod<
      [_maxTransactionsPerBlock: BigNumberish, _maxFailedTransactionsRatio: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateAutomaticUnpauseDelay: TypedContractMethod<
      [_delay: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    voteOnPauseProposal: TypedContractMethod<
      [proposalId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'GOVERNANCE_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'GUARDIAN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addGuardian'): TypedContractMethod<
      [guardian: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'automaticUnpauseDelay'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'blockStats'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint] & {transactions: bigint, failedTransactions: bigint, timestamp: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'circuitBrokenAt'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'communityOverride'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createPauseProposal'): TypedContractMethod<
      [reason: string, isPause: boolean, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'executeAutomaticUnpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getCircuitStatus'): TypedContractMethod<
      [],
      [[boolean, bigint, boolean] & {isBroken: boolean, brokenAt: bigint, canAutomaticUnpause: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getGuardianCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleMember'): TypedContractMethod<
      [role: BytesLike, index: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleMemberCount'): TypedContractMethod<
      [role: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleMembers'): TypedContractMethod<
      [role: BytesLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'guardiansRequired'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isCircuitBroken'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'maxFailedTransactionsRatio'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'maxTransactionsPerBlock'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'pauseProposalCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'pauseProposals'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, boolean, boolean] & {proposer: string, reason: string, proposedAt: bigint, votes: bigint, executed: boolean, isPause: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'recordTransaction'): TypedContractMethod<
      [blockNumber: BigNumberish, success: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'removeGuardian'): TypedContractMethod<
      [guardian: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'shouldAutomaticUnpause'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'updateAnomalyParameters'): TypedContractMethod<
      [_maxTransactionsPerBlock: BigNumberish, _maxFailedTransactionsRatio: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateAutomaticUnpauseDelay'): TypedContractMethod<
      [_delay: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteOnPauseProposal'): TypedContractMethod<
      [proposalId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AnomalyDetected'): TypedContractEvent<AnomalyDetectedEvent.InputTuple, AnomalyDetectedEvent.OutputTuple, AnomalyDetectedEvent.OutputObject>;
getEvent(key: 'CircuitBreakerReset'): TypedContractEvent<CircuitBreakerResetEvent.InputTuple, CircuitBreakerResetEvent.OutputTuple, CircuitBreakerResetEvent.OutputObject>;
getEvent(key: 'CircuitBreakerTriggered'): TypedContractEvent<CircuitBreakerTriggeredEvent.InputTuple, CircuitBreakerTriggeredEvent.OutputTuple, CircuitBreakerTriggeredEvent.OutputObject>;
getEvent(key: 'CommunityOverride'): TypedContractEvent<CommunityOverrideEvent.InputTuple, CommunityOverrideEvent.OutputTuple, CommunityOverrideEvent.OutputObject>;
getEvent(key: 'GuardianAdded'): TypedContractEvent<GuardianAddedEvent.InputTuple, GuardianAddedEvent.OutputTuple, GuardianAddedEvent.OutputObject>;
getEvent(key: 'GuardianRemoved'): TypedContractEvent<GuardianRemovedEvent.InputTuple, GuardianRemovedEvent.OutputTuple, GuardianRemovedEvent.OutputObject>;
getEvent(key: 'PauseProposalCreated'): TypedContractEvent<PauseProposalCreatedEvent.InputTuple, PauseProposalCreatedEvent.OutputTuple, PauseProposalCreatedEvent.OutputObject>;
getEvent(key: 'PauseProposalExecuted'): TypedContractEvent<PauseProposalExecutedEvent.InputTuple, PauseProposalExecutedEvent.OutputTuple, PauseProposalExecutedEvent.OutputObject>;
getEvent(key: 'PauseProposalVoted'): TypedContractEvent<PauseProposalVotedEvent.InputTuple, PauseProposalVotedEvent.OutputTuple, PauseProposalVotedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    filters: {
      
      'AnomalyDetected(uint256,string)': TypedContractEvent<AnomalyDetectedEvent.InputTuple, AnomalyDetectedEvent.OutputTuple, AnomalyDetectedEvent.OutputObject>;
      AnomalyDetected: TypedContractEvent<AnomalyDetectedEvent.InputTuple, AnomalyDetectedEvent.OutputTuple, AnomalyDetectedEvent.OutputObject>;
    

      'CircuitBreakerReset(address)': TypedContractEvent<CircuitBreakerResetEvent.InputTuple, CircuitBreakerResetEvent.OutputTuple, CircuitBreakerResetEvent.OutputObject>;
      CircuitBreakerReset: TypedContractEvent<CircuitBreakerResetEvent.InputTuple, CircuitBreakerResetEvent.OutputTuple, CircuitBreakerResetEvent.OutputObject>;
    

      'CircuitBreakerTriggered(string,address)': TypedContractEvent<CircuitBreakerTriggeredEvent.InputTuple, CircuitBreakerTriggeredEvent.OutputTuple, CircuitBreakerTriggeredEvent.OutputObject>;
      CircuitBreakerTriggered: TypedContractEvent<CircuitBreakerTriggeredEvent.InputTuple, CircuitBreakerTriggeredEvent.OutputTuple, CircuitBreakerTriggeredEvent.OutputObject>;
    

      'CommunityOverride(address)': TypedContractEvent<CommunityOverrideEvent.InputTuple, CommunityOverrideEvent.OutputTuple, CommunityOverrideEvent.OutputObject>;
      CommunityOverride: TypedContractEvent<CommunityOverrideEvent.InputTuple, CommunityOverrideEvent.OutputTuple, CommunityOverrideEvent.OutputObject>;
    

      'GuardianAdded(address)': TypedContractEvent<GuardianAddedEvent.InputTuple, GuardianAddedEvent.OutputTuple, GuardianAddedEvent.OutputObject>;
      GuardianAdded: TypedContractEvent<GuardianAddedEvent.InputTuple, GuardianAddedEvent.OutputTuple, GuardianAddedEvent.OutputObject>;
    

      'GuardianRemoved(address)': TypedContractEvent<GuardianRemovedEvent.InputTuple, GuardianRemovedEvent.OutputTuple, GuardianRemovedEvent.OutputObject>;
      GuardianRemoved: TypedContractEvent<GuardianRemovedEvent.InputTuple, GuardianRemovedEvent.OutputTuple, GuardianRemovedEvent.OutputObject>;
    

      'PauseProposalCreated(uint256,address,string,bool)': TypedContractEvent<PauseProposalCreatedEvent.InputTuple, PauseProposalCreatedEvent.OutputTuple, PauseProposalCreatedEvent.OutputObject>;
      PauseProposalCreated: TypedContractEvent<PauseProposalCreatedEvent.InputTuple, PauseProposalCreatedEvent.OutputTuple, PauseProposalCreatedEvent.OutputObject>;
    

      'PauseProposalExecuted(uint256,bool)': TypedContractEvent<PauseProposalExecutedEvent.InputTuple, PauseProposalExecutedEvent.OutputTuple, PauseProposalExecutedEvent.OutputObject>;
      PauseProposalExecuted: TypedContractEvent<PauseProposalExecutedEvent.InputTuple, PauseProposalExecutedEvent.OutputTuple, PauseProposalExecutedEvent.OutputObject>;
    

      'PauseProposalVoted(uint256,address,bool)': TypedContractEvent<PauseProposalVotedEvent.InputTuple, PauseProposalVotedEvent.OutputTuple, PauseProposalVotedEvent.OutputObject>;
      PauseProposalVoted: TypedContractEvent<PauseProposalVotedEvent.InputTuple, PauseProposalVotedEvent.OutputTuple, PauseProposalVotedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    
    };
  }