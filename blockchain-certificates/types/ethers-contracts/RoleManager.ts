/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface RoleManagerInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "DEFAULT_TERM_DURATION" | "GOVERNANCE_ROLE" | "ISSUER_REPUTATION_THRESHOLD" | "ISSUER_ROLE" | "REVOKER_ROLE" | "VERIFIER_ROLE" | "checkAndRevokeExpiredRole" | "getReputation" | "getRoleAdmin" | "getRoleAssignment" | "grantRole" | "grantRoleByGovernance" | "hasRole" | "pause" | "paused" | "renewRole" | "renounceRole" | "reputations" | "requestRole" | "revokeRole" | "roleAssignments" | "roleRequestCounter" | "roleRequests" | "slashAccount" | "supportsInterface" | "unpause" | "updateReputation" | "voteOnRoleRequest" | "votesRequiredForApproval" | "votingPeriod"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AccountSlashed" | "AutomaticRoleGranted" | "Paused" | "ReputationUpdated" | "RoleAdminChanged" | "RoleExpired" | "RoleGranted" | "RoleGrantedWithTerm" | "RoleRenewed" | "RoleRequestApproved" | "RoleRequestRejected" | "RoleRequestVoted" | "RoleRequested" | "RoleRevoked" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_TERM_DURATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'GOVERNANCE_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'ISSUER_REPUTATION_THRESHOLD', values?: undefined): string;
encodeFunctionData(functionFragment: 'ISSUER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'REVOKER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'VERIFIER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'checkAndRevokeExpiredRole', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'getReputation', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getRoleAssignment', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'grantRoleByGovernance', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'renewRole', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'reputations', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'requestRole', values: [BytesLike, string]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'roleAssignments', values: [AddressLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'roleRequestCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'roleRequests', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'slashAccount', values: [AddressLike, BytesLike, string]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'updateReputation', values: [AddressLike, boolean, boolean]): string;
encodeFunctionData(functionFragment: 'voteOnRoleRequest', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'votesRequiredForApproval', values?: undefined): string;
encodeFunctionData(functionFragment: 'votingPeriod', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_TERM_DURATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'GOVERNANCE_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ISSUER_REPUTATION_THRESHOLD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ISSUER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'REVOKER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'VERIFIER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkAndRevokeExpiredRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getReputation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAssignment', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRoleByGovernance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renewRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'reputations', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roleAssignments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roleRequestCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roleRequests', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'slashAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateReputation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voteOnRoleRequest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votesRequiredForApproval', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'votingPeriod', data: BytesLike): Result;
  }

  
    export namespace AccountSlashedEvent {
      export type InputTuple = [account: AddressLike, role: BytesLike, reason: string];
      export type OutputTuple = [account: string, role: string, reason: string];
      export interface OutputObject {account: string, role: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AutomaticRoleGrantedEvent {
      export type InputTuple = [account: AddressLike, role: BytesLike, reason: string];
      export type OutputTuple = [account: string, role: string, reason: string];
      export interface OutputObject {account: string, role: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReputationUpdatedEvent {
      export type InputTuple = [account: AddressLike, newScore: BigNumberish];
      export type OutputTuple = [account: string, newScore: bigint];
      export interface OutputObject {account: string, newScore: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleExpiredEvent {
      export type InputTuple = [account: AddressLike, role: BytesLike];
      export type OutputTuple = [account: string, role: string];
      export interface OutputObject {account: string, role: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedWithTermEvent {
      export type InputTuple = [account: AddressLike, role: BytesLike, expiresAt: BigNumberish];
      export type OutputTuple = [account: string, role: string, expiresAt: bigint];
      export interface OutputObject {account: string, role: string, expiresAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRenewedEvent {
      export type InputTuple = [account: AddressLike, role: BytesLike, newExpiresAt: BigNumberish];
      export type OutputTuple = [account: string, role: string, newExpiresAt: bigint];
      export interface OutputObject {account: string, role: string, newExpiresAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRequestApprovedEvent {
      export type InputTuple = [requestId: BigNumberish, requester: AddressLike, role: BytesLike];
      export type OutputTuple = [requestId: bigint, requester: string, role: string];
      export interface OutputObject {requestId: bigint, requester: string, role: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRequestRejectedEvent {
      export type InputTuple = [requestId: BigNumberish, requester: AddressLike, role: BytesLike];
      export type OutputTuple = [requestId: bigint, requester: string, role: string];
      export interface OutputObject {requestId: bigint, requester: string, role: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRequestVotedEvent {
      export type InputTuple = [requestId: BigNumberish, voter: AddressLike, support: boolean];
      export type OutputTuple = [requestId: bigint, voter: string, support: boolean];
      export interface OutputObject {requestId: bigint, voter: string, support: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRequestedEvent {
      export type InputTuple = [requestId: BigNumberish, requester: AddressLike, role: BytesLike, justification: string];
      export type OutputTuple = [requestId: bigint, requester: string, role: string, justification: string];
      export interface OutputObject {requestId: bigint, requester: string, role: string, justification: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface RoleManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): RoleManager;
    waitForDeployment(): Promise<this>;

    interface: RoleManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_TERM_DURATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    GOVERNANCE_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ISSUER_REPUTATION_THRESHOLD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    ISSUER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    REVOKER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    VERIFIER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    checkAndRevokeExpiredRole: TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    getReputation: TypedContractMethod<
      [account: AddressLike, ],
      [[bigint, bigint, bigint, bigint, boolean] & {score: bigint, certificatesIssued: bigint, certificatesRevoked: bigint, violations: bigint, isSlashed: boolean }],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getRoleAssignment: TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [[bigint, bigint, boolean, bigint] & {grantedAt: bigint, expiresAt: bigint, isActive: boolean, termNumber: bigint }],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    grantRoleByGovernance: TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    renewRole: TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    reputations: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint, boolean] & {score: bigint, certificatesIssued: bigint, certificatesRevoked: bigint, violations: bigint, isSlashed: boolean }],
      'view'
    >
    

    
    requestRole: TypedContractMethod<
      [role: BytesLike, justification: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    roleAssignments: TypedContractMethod<
      [arg0: AddressLike, arg1: BytesLike, ],
      [[bigint, bigint, boolean, bigint] & {grantedAt: bigint, expiresAt: bigint, isActive: boolean, termNumber: bigint }],
      'view'
    >
    

    
    roleRequestCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    roleRequests: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, boolean, boolean] & {requester: string, role: string, justification: string, requestedAt: bigint, votes: bigint, approved: boolean, processed: boolean }],
      'view'
    >
    

    
    slashAccount: TypedContractMethod<
      [account: AddressLike, role: BytesLike, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    updateReputation: TypedContractMethod<
      [account: AddressLike, certificateIssued: boolean, certificateRevoked: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    voteOnRoleRequest: TypedContractMethod<
      [requestId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    votesRequiredForApproval: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    votingPeriod: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_TERM_DURATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'GOVERNANCE_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ISSUER_REPUTATION_THRESHOLD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ISSUER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'REVOKER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'VERIFIER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'checkAndRevokeExpiredRole'): TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getReputation'): TypedContractMethod<
      [account: AddressLike, ],
      [[bigint, bigint, bigint, bigint, boolean] & {score: bigint, certificatesIssued: bigint, certificatesRevoked: bigint, violations: bigint, isSlashed: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAssignment'): TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [[bigint, bigint, boolean, bigint] & {grantedAt: bigint, expiresAt: bigint, isActive: boolean, termNumber: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'grantRoleByGovernance'): TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renewRole'): TypedContractMethod<
      [account: AddressLike, role: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'reputations'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint, boolean] & {score: bigint, certificatesIssued: bigint, certificatesRevoked: bigint, violations: bigint, isSlashed: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'requestRole'): TypedContractMethod<
      [role: BytesLike, justification: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'roleAssignments'): TypedContractMethod<
      [arg0: AddressLike, arg1: BytesLike, ],
      [[bigint, bigint, boolean, bigint] & {grantedAt: bigint, expiresAt: bigint, isActive: boolean, termNumber: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'roleRequestCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'roleRequests'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, boolean, boolean] & {requester: string, role: string, justification: string, requestedAt: bigint, votes: bigint, approved: boolean, processed: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'slashAccount'): TypedContractMethod<
      [account: AddressLike, role: BytesLike, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateReputation'): TypedContractMethod<
      [account: AddressLike, certificateIssued: boolean, certificateRevoked: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voteOnRoleRequest'): TypedContractMethod<
      [requestId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'votesRequiredForApproval'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'votingPeriod'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'AccountSlashed'): TypedContractEvent<AccountSlashedEvent.InputTuple, AccountSlashedEvent.OutputTuple, AccountSlashedEvent.OutputObject>;
getEvent(key: 'AutomaticRoleGranted'): TypedContractEvent<AutomaticRoleGrantedEvent.InputTuple, AutomaticRoleGrantedEvent.OutputTuple, AutomaticRoleGrantedEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'ReputationUpdated'): TypedContractEvent<ReputationUpdatedEvent.InputTuple, ReputationUpdatedEvent.OutputTuple, ReputationUpdatedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleExpired'): TypedContractEvent<RoleExpiredEvent.InputTuple, RoleExpiredEvent.OutputTuple, RoleExpiredEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleGrantedWithTerm'): TypedContractEvent<RoleGrantedWithTermEvent.InputTuple, RoleGrantedWithTermEvent.OutputTuple, RoleGrantedWithTermEvent.OutputObject>;
getEvent(key: 'RoleRenewed'): TypedContractEvent<RoleRenewedEvent.InputTuple, RoleRenewedEvent.OutputTuple, RoleRenewedEvent.OutputObject>;
getEvent(key: 'RoleRequestApproved'): TypedContractEvent<RoleRequestApprovedEvent.InputTuple, RoleRequestApprovedEvent.OutputTuple, RoleRequestApprovedEvent.OutputObject>;
getEvent(key: 'RoleRequestRejected'): TypedContractEvent<RoleRequestRejectedEvent.InputTuple, RoleRequestRejectedEvent.OutputTuple, RoleRequestRejectedEvent.OutputObject>;
getEvent(key: 'RoleRequestVoted'): TypedContractEvent<RoleRequestVotedEvent.InputTuple, RoleRequestVotedEvent.OutputTuple, RoleRequestVotedEvent.OutputObject>;
getEvent(key: 'RoleRequested'): TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'AccountSlashed(address,bytes32,string)': TypedContractEvent<AccountSlashedEvent.InputTuple, AccountSlashedEvent.OutputTuple, AccountSlashedEvent.OutputObject>;
      AccountSlashed: TypedContractEvent<AccountSlashedEvent.InputTuple, AccountSlashedEvent.OutputTuple, AccountSlashedEvent.OutputObject>;
    

      'AutomaticRoleGranted(address,bytes32,string)': TypedContractEvent<AutomaticRoleGrantedEvent.InputTuple, AutomaticRoleGrantedEvent.OutputTuple, AutomaticRoleGrantedEvent.OutputObject>;
      AutomaticRoleGranted: TypedContractEvent<AutomaticRoleGrantedEvent.InputTuple, AutomaticRoleGrantedEvent.OutputTuple, AutomaticRoleGrantedEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'ReputationUpdated(address,uint256)': TypedContractEvent<ReputationUpdatedEvent.InputTuple, ReputationUpdatedEvent.OutputTuple, ReputationUpdatedEvent.OutputObject>;
      ReputationUpdated: TypedContractEvent<ReputationUpdatedEvent.InputTuple, ReputationUpdatedEvent.OutputTuple, ReputationUpdatedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleExpired(address,bytes32)': TypedContractEvent<RoleExpiredEvent.InputTuple, RoleExpiredEvent.OutputTuple, RoleExpiredEvent.OutputObject>;
      RoleExpired: TypedContractEvent<RoleExpiredEvent.InputTuple, RoleExpiredEvent.OutputTuple, RoleExpiredEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleGrantedWithTerm(address,bytes32,uint256)': TypedContractEvent<RoleGrantedWithTermEvent.InputTuple, RoleGrantedWithTermEvent.OutputTuple, RoleGrantedWithTermEvent.OutputObject>;
      RoleGrantedWithTerm: TypedContractEvent<RoleGrantedWithTermEvent.InputTuple, RoleGrantedWithTermEvent.OutputTuple, RoleGrantedWithTermEvent.OutputObject>;
    

      'RoleRenewed(address,bytes32,uint256)': TypedContractEvent<RoleRenewedEvent.InputTuple, RoleRenewedEvent.OutputTuple, RoleRenewedEvent.OutputObject>;
      RoleRenewed: TypedContractEvent<RoleRenewedEvent.InputTuple, RoleRenewedEvent.OutputTuple, RoleRenewedEvent.OutputObject>;
    

      'RoleRequestApproved(uint256,address,bytes32)': TypedContractEvent<RoleRequestApprovedEvent.InputTuple, RoleRequestApprovedEvent.OutputTuple, RoleRequestApprovedEvent.OutputObject>;
      RoleRequestApproved: TypedContractEvent<RoleRequestApprovedEvent.InputTuple, RoleRequestApprovedEvent.OutputTuple, RoleRequestApprovedEvent.OutputObject>;
    

      'RoleRequestRejected(uint256,address,bytes32)': TypedContractEvent<RoleRequestRejectedEvent.InputTuple, RoleRequestRejectedEvent.OutputTuple, RoleRequestRejectedEvent.OutputObject>;
      RoleRequestRejected: TypedContractEvent<RoleRequestRejectedEvent.InputTuple, RoleRequestRejectedEvent.OutputTuple, RoleRequestRejectedEvent.OutputObject>;
    

      'RoleRequestVoted(uint256,address,bool)': TypedContractEvent<RoleRequestVotedEvent.InputTuple, RoleRequestVotedEvent.OutputTuple, RoleRequestVotedEvent.OutputObject>;
      RoleRequestVoted: TypedContractEvent<RoleRequestVotedEvent.InputTuple, RoleRequestVotedEvent.OutputTuple, RoleRequestVotedEvent.OutputObject>;
    

      'RoleRequested(uint256,address,bytes32,string)': TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
      RoleRequested: TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }