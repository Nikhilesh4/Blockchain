/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface MultiSigCertificateNFTInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "ISSUER_ROLE" | "addIssuer" | "approve" | "approveCertificate" | "balanceOf" | "certificateRequests" | "executeMint" | "getApproved" | "getCertificateDetails" | "getRequestDetails" | "getRoleAdmin" | "getTotalMinted" | "grantRole" | "hasApproved" | "hasRole" | "isApprovedForAll" | "isIssuer" | "isRevoked" | "name" | "ownerOf" | "removeIssuer" | "renounceRole" | "requestCertificate" | "requiredApprovals" | "revokeCertificate" | "revokeRole" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom" | "updateRequiredApprovals" | "verifyCertificate"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "BatchMetadataUpdate" | "CertificateApproved" | "CertificateMinted" | "CertificateRequested" | "CertificateRevoked" | "IssuerAdded" | "IssuerRemoved" | "MetadataUpdate" | "RequiredApprovalsUpdated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'ISSUER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addIssuer', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'approveCertificate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'certificateRequests', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'executeMint', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCertificateDetails', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRequestDetails', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getTotalMinted', values?: undefined): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasApproved', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isIssuer', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isRevoked', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'removeIssuer', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'requestCertificate', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'requiredApprovals', values?: undefined): string;
encodeFunctionData(functionFragment: 'revokeCertificate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateRequiredApprovals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'verifyCertificate', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ISSUER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addIssuer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approveCertificate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'certificateRequests', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeMint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCertificateDetails', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRequestDetails', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalMinted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isIssuer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isRevoked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeIssuer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestCertificate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requiredApprovals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeCertificate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateRequiredApprovals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyCertificate', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BatchMetadataUpdateEvent {
      export type InputTuple = [_fromTokenId: BigNumberish, _toTokenId: BigNumberish];
      export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
      export interface OutputObject {_fromTokenId: bigint, _toTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateApprovedEvent {
      export type InputTuple = [requestId: BigNumberish, approver: AddressLike, currentApprovals: BigNumberish, requiredApprovals: BigNumberish];
      export type OutputTuple = [requestId: bigint, approver: string, currentApprovals: bigint, requiredApprovals: bigint];
      export interface OutputObject {requestId: bigint, approver: string, currentApprovals: bigint, requiredApprovals: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateMintedEvent {
      export type InputTuple = [tokenId: BigNumberish, recipient: AddressLike, tokenURI: string];
      export type OutputTuple = [tokenId: bigint, recipient: string, tokenURI: string];
      export interface OutputObject {tokenId: bigint, recipient: string, tokenURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateRequestedEvent {
      export type InputTuple = [requestId: BigNumberish, recipient: AddressLike, requestedBy: AddressLike];
      export type OutputTuple = [requestId: bigint, recipient: string, requestedBy: string];
      export interface OutputObject {requestId: bigint, recipient: string, requestedBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateRevokedEvent {
      export type InputTuple = [tokenId: BigNumberish, revoker: AddressLike];
      export type OutputTuple = [tokenId: bigint, revoker: string];
      export interface OutputObject {tokenId: bigint, revoker: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace IssuerAddedEvent {
      export type InputTuple = [issuer: AddressLike, addedBy: AddressLike];
      export type OutputTuple = [issuer: string, addedBy: string];
      export interface OutputObject {issuer: string, addedBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace IssuerRemovedEvent {
      export type InputTuple = [issuer: AddressLike, removedBy: AddressLike];
      export type OutputTuple = [issuer: string, removedBy: string];
      export interface OutputObject {issuer: string, removedBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MetadataUpdateEvent {
      export type InputTuple = [_tokenId: BigNumberish];
      export type OutputTuple = [_tokenId: bigint];
      export interface OutputObject {_tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequiredApprovalsUpdatedEvent {
      export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
      export type OutputTuple = [oldValue: bigint, newValue: bigint];
      export interface OutputObject {oldValue: bigint, newValue: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MultiSigCertificateNFT extends BaseContract {
    
    connect(runner?: ContractRunner | null): MultiSigCertificateNFT;
    waitForDeployment(): Promise<this>;

    interface: MultiSigCertificateNFTInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ISSUER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addIssuer: TypedContractMethod<
      [issuer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    approveCertificate: TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    certificateRequests: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, boolean, string, bigint] & {recipient: string, tokenURI: string, approvalCount: bigint, executed: boolean, requestedBy: string, requestedAt: bigint }],
      'view'
    >
    

    
    executeMint: TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getCertificateDetails: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, bigint, boolean, string] & {owner: string, mintedAt: bigint, revoked: boolean, uri: string }],
      'view'
    >
    

    
    getRequestDetails: TypedContractMethod<
      [requestId: BigNumberish, ],
      [[string, string, bigint, boolean, string, bigint] & {recipient: string, tokenURI: string, approvalCount: bigint, executed: boolean, requestedBy: string, requestedAt: bigint }],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getTotalMinted: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasApproved: TypedContractMethod<
      [requestId: BigNumberish, issuer: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isIssuer: TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isRevoked: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    removeIssuer: TypedContractMethod<
      [issuer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    requestCertificate: TypedContractMethod<
      [recipient: AddressLike, tokenURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    requiredApprovals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    revokeCertificate: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateRequiredApprovals: TypedContractMethod<
      [newRequired: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    verifyCertificate: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ISSUER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addIssuer'): TypedContractMethod<
      [issuer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approveCertificate'): TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'certificateRequests'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, boolean, string, bigint] & {recipient: string, tokenURI: string, approvalCount: bigint, executed: boolean, requestedBy: string, requestedAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'executeMint'): TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getCertificateDetails'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, bigint, boolean, string] & {owner: string, mintedAt: bigint, revoked: boolean, uri: string }],
      'view'
    >;
getFunction(nameOrSignature: 'getRequestDetails'): TypedContractMethod<
      [requestId: BigNumberish, ],
      [[string, string, bigint, boolean, string, bigint] & {recipient: string, tokenURI: string, approvalCount: bigint, executed: boolean, requestedBy: string, requestedAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalMinted'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasApproved'): TypedContractMethod<
      [requestId: BigNumberish, issuer: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isIssuer'): TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isRevoked'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeIssuer'): TypedContractMethod<
      [issuer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestCertificate'): TypedContractMethod<
      [recipient: AddressLike, tokenURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requiredApprovals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'revokeCertificate'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateRequiredApprovals'): TypedContractMethod<
      [newRequired: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifyCertificate'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'BatchMetadataUpdate'): TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
getEvent(key: 'CertificateApproved'): TypedContractEvent<CertificateApprovedEvent.InputTuple, CertificateApprovedEvent.OutputTuple, CertificateApprovedEvent.OutputObject>;
getEvent(key: 'CertificateMinted'): TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
getEvent(key: 'CertificateRequested'): TypedContractEvent<CertificateRequestedEvent.InputTuple, CertificateRequestedEvent.OutputTuple, CertificateRequestedEvent.OutputObject>;
getEvent(key: 'CertificateRevoked'): TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
getEvent(key: 'IssuerAdded'): TypedContractEvent<IssuerAddedEvent.InputTuple, IssuerAddedEvent.OutputTuple, IssuerAddedEvent.OutputObject>;
getEvent(key: 'IssuerRemoved'): TypedContractEvent<IssuerRemovedEvent.InputTuple, IssuerRemovedEvent.OutputTuple, IssuerRemovedEvent.OutputObject>;
getEvent(key: 'MetadataUpdate'): TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
getEvent(key: 'RequiredApprovalsUpdated'): TypedContractEvent<RequiredApprovalsUpdatedEvent.InputTuple, RequiredApprovalsUpdatedEvent.OutputTuple, RequiredApprovalsUpdatedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
      BatchMetadataUpdate: TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
    

      'CertificateApproved(uint256,address,uint256,uint256)': TypedContractEvent<CertificateApprovedEvent.InputTuple, CertificateApprovedEvent.OutputTuple, CertificateApprovedEvent.OutputObject>;
      CertificateApproved: TypedContractEvent<CertificateApprovedEvent.InputTuple, CertificateApprovedEvent.OutputTuple, CertificateApprovedEvent.OutputObject>;
    

      'CertificateMinted(uint256,address,string)': TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
      CertificateMinted: TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
    

      'CertificateRequested(uint256,address,address)': TypedContractEvent<CertificateRequestedEvent.InputTuple, CertificateRequestedEvent.OutputTuple, CertificateRequestedEvent.OutputObject>;
      CertificateRequested: TypedContractEvent<CertificateRequestedEvent.InputTuple, CertificateRequestedEvent.OutputTuple, CertificateRequestedEvent.OutputObject>;
    

      'CertificateRevoked(uint256,address)': TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
      CertificateRevoked: TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
    

      'IssuerAdded(address,address)': TypedContractEvent<IssuerAddedEvent.InputTuple, IssuerAddedEvent.OutputTuple, IssuerAddedEvent.OutputObject>;
      IssuerAdded: TypedContractEvent<IssuerAddedEvent.InputTuple, IssuerAddedEvent.OutputTuple, IssuerAddedEvent.OutputObject>;
    

      'IssuerRemoved(address,address)': TypedContractEvent<IssuerRemovedEvent.InputTuple, IssuerRemovedEvent.OutputTuple, IssuerRemovedEvent.OutputObject>;
      IssuerRemoved: TypedContractEvent<IssuerRemovedEvent.InputTuple, IssuerRemovedEvent.OutputTuple, IssuerRemovedEvent.OutputObject>;
    

      'MetadataUpdate(uint256)': TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
      MetadataUpdate: TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
    

      'RequiredApprovalsUpdated(uint256,uint256)': TypedContractEvent<RequiredApprovalsUpdatedEvent.InputTuple, RequiredApprovalsUpdatedEvent.OutputTuple, RequiredApprovalsUpdatedEvent.OutputObject>;
      RequiredApprovalsUpdated: TypedContractEvent<RequiredApprovalsUpdatedEvent.InputTuple, RequiredApprovalsUpdatedEvent.OutputTuple, RequiredApprovalsUpdatedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }