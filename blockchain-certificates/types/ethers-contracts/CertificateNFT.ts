/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CertificateNFTInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "ISSUER_ROLE" | "REVOKER_ROLE" | "SUPER_ADMIN_ROLE" | "VERIFIER_ROLE" | "approvalThreshold" | "approve" | "approveProposal" | "balanceOf" | "batchGrantRoles" | "canIssue" | "canRevoke" | "cancelProposal" | "createProposal" | "emergencyRevokeRole" | "executeProposal" | "getAllProposalIds" | "getApproved" | "getCertificateDetails" | "getPendingProposals" | "getProposal" | "getProposalApprovers" | "getProposalCount" | "getRoleAdmin" | "getRoleMemberCount" | "getRoleMembers" | "getTotalMinted" | "getUserRoles" | "grantRole" | "hasApproved" | "hasRole" | "isAdmin" | "isApprovedForAll" | "isRevoked" | "mintCertificate" | "name" | "owner" | "ownerOf" | "pause" | "paused" | "proposalApprovals" | "proposalApprovers" | "proposals" | "renounceOwnership" | "renounceRole" | "requestRole" | "revokeApproval" | "revokeCertificate" | "revokeRole" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "setApprovalThreshold" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom" | "transferOwnership" | "unpause" | "verifyCertificate"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "ApprovalRevoked" | "BatchMetadataUpdate" | "CertificateMinted" | "CertificateRevoked" | "EmergencyRoleRevoked" | "MetadataUpdate" | "OwnershipTransferred" | "Paused" | "ProposalApproved" | "ProposalCancelled" | "ProposalCreated" | "ProposalExecuted" | "RoleAdminChanged" | "RoleGranted" | "RoleRequested" | "RoleRevoked" | "ThresholdChanged" | "Transfer" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'ISSUER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'REVOKER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'SUPER_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'VERIFIER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'approvalThreshold', values?: undefined): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'approveProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'batchGrantRoles', values: [AddressLike[], BytesLike[]]): string;
encodeFunctionData(functionFragment: 'canIssue', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'canRevoke', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'cancelProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createProposal', values: [AddressLike, string, string, string]): string;
encodeFunctionData(functionFragment: 'emergencyRevokeRole', values: [AddressLike, BytesLike, string]): string;
encodeFunctionData(functionFragment: 'executeProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAllProposalIds', values?: undefined): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCertificateDetails', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPendingProposals', values?: undefined): string;
encodeFunctionData(functionFragment: 'getProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getProposalApprovers', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getProposalCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getRoleMembers', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getTotalMinted', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserRoles', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasApproved', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isAdmin', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isRevoked', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'mintCertificate', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'proposalApprovals', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'proposalApprovers', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'proposals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'requestRole', values: [BytesLike, string]): string;
encodeFunctionData(functionFragment: 'revokeApproval', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'revokeCertificate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'setApprovalThreshold', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'verifyCertificate', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ISSUER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'REVOKER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'SUPER_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'VERIFIER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approvalThreshold', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approveProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'batchGrantRoles', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canIssue', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canRevoke', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyRevokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllProposalIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCertificateDetails', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPendingProposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposalApprovers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposalCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleMembers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalMinted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserRoles', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isRevoked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintCertificate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposalApprovals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposalApprovers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeApproval', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeCertificate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalThreshold', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyCertificate', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalRevokedEvent {
      export type InputTuple = [proposalId: BigNumberish, approver: AddressLike, approvalCount: BigNumberish];
      export type OutputTuple = [proposalId: bigint, approver: string, approvalCount: bigint];
      export interface OutputObject {proposalId: bigint, approver: string, approvalCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BatchMetadataUpdateEvent {
      export type InputTuple = [_fromTokenId: BigNumberish, _toTokenId: BigNumberish];
      export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
      export interface OutputObject {_fromTokenId: bigint, _toTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateMintedEvent {
      export type InputTuple = [tokenId: BigNumberish, recipient: AddressLike, tokenURI: string];
      export type OutputTuple = [tokenId: bigint, recipient: string, tokenURI: string];
      export interface OutputObject {tokenId: bigint, recipient: string, tokenURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CertificateRevokedEvent {
      export type InputTuple = [tokenId: BigNumberish, revoker: AddressLike];
      export type OutputTuple = [tokenId: bigint, revoker: string];
      export interface OutputObject {tokenId: bigint, revoker: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmergencyRoleRevokedEvent {
      export type InputTuple = [admin: AddressLike, user: AddressLike, role: BytesLike, reason: string];
      export type OutputTuple = [admin: string, user: string, role: string, reason: string];
      export interface OutputObject {admin: string, user: string, role: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MetadataUpdateEvent {
      export type InputTuple = [_tokenId: BigNumberish];
      export type OutputTuple = [_tokenId: bigint];
      export interface OutputObject {_tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalApprovedEvent {
      export type InputTuple = [proposalId: BigNumberish, approver: AddressLike, approvalCount: BigNumberish];
      export type OutputTuple = [proposalId: bigint, approver: string, approvalCount: bigint];
      export interface OutputObject {proposalId: bigint, approver: string, approvalCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalCancelledEvent {
      export type InputTuple = [proposalId: BigNumberish, canceller: AddressLike];
      export type OutputTuple = [proposalId: bigint, canceller: string];
      export interface OutputObject {proposalId: bigint, canceller: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalCreatedEvent {
      export type InputTuple = [proposalId: BigNumberish, proposer: AddressLike, recipient: AddressLike, metadataURI: string];
      export type OutputTuple = [proposalId: bigint, proposer: string, recipient: string, metadataURI: string];
      export interface OutputObject {proposalId: bigint, proposer: string, recipient: string, metadataURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalExecutedEvent {
      export type InputTuple = [proposalId: BigNumberish, tokenId: BigNumberish, recipient: AddressLike];
      export type OutputTuple = [proposalId: bigint, tokenId: bigint, recipient: string];
      export interface OutputObject {proposalId: bigint, tokenId: bigint, recipient: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRequestedEvent {
      export type InputTuple = [requester: AddressLike, role: BytesLike, justification: string];
      export type OutputTuple = [requester: string, role: string, justification: string];
      export interface OutputObject {requester: string, role: string, justification: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ThresholdChangedEvent {
      export type InputTuple = [oldThreshold: BigNumberish, newThreshold: BigNumberish, changedBy: AddressLike];
      export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint, changedBy: string];
      export interface OutputObject {oldThreshold: bigint, newThreshold: bigint, changedBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CertificateNFT extends BaseContract {
    
    connect(runner?: ContractRunner | null): CertificateNFT;
    waitForDeployment(): Promise<this>;

    interface: CertificateNFTInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ISSUER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    REVOKER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    SUPER_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    VERIFIER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    approvalThreshold: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    approveProposal: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    batchGrantRoles: TypedContractMethod<
      [users: AddressLike[], roles: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    canIssue: TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    canRevoke: TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    cancelProposal: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createProposal: TypedContractMethod<
      [recipient: AddressLike, recipientName: string, grade: string, metadataURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    emergencyRevokeRole: TypedContractMethod<
      [user: AddressLike, role: BytesLike, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    executeProposal: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getAllProposalIds: TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getCertificateDetails: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, bigint, boolean, string] & {owner: string, mintedAt: bigint, revoked: boolean, uri: string }],
      'view'
    >
    

    
    getPendingProposals: TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >
    

    
    getProposal: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[bigint, string, string, string, string, string, bigint, bigint, boolean, boolean] & {id: bigint, proposer: string, recipient: string, recipientName: string, grade: string, metadataURI: string, approvalCount: bigint, createdAt: bigint, executed: boolean, cancelled: boolean }],
      'view'
    >
    

    
    getProposalApprovers: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getProposalCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getRoleMemberCount: TypedContractMethod<
      [role: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    getRoleMembers: TypedContractMethod<
      [role: BytesLike, ],
      [string[]],
      'view'
    >
    

    
    getTotalMinted: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getUserRoles: TypedContractMethod<
      [account: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasApproved: TypedContractMethod<
      [proposalId: BigNumberish, approver: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isAdmin: TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isRevoked: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    mintCertificate: TypedContractMethod<
      [recipient: AddressLike, _tokenURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    proposalApprovals: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    proposalApprovers: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [string],
      'view'
    >
    

    
    proposals: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, string, string, string, bigint, bigint, boolean, boolean] & {proposalId: bigint, proposer: string, recipient: string, recipientName: string, grade: string, metadataURI: string, approvalCount: bigint, createdAt: bigint, executed: boolean, cancelled: boolean }],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    requestRole: TypedContractMethod<
      [role: BytesLike, justification: string, ],
      [void],
      'nonpayable'
    >
    

    
    revokeApproval: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revokeCertificate: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalThreshold: TypedContractMethod<
      [newThreshold: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    verifyCertificate: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ISSUER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'REVOKER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'SUPER_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'VERIFIER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'approvalThreshold'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approveProposal'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'batchGrantRoles'): TypedContractMethod<
      [users: AddressLike[], roles: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'canIssue'): TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'canRevoke'): TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'cancelProposal'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createProposal'): TypedContractMethod<
      [recipient: AddressLike, recipientName: string, grade: string, metadataURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyRevokeRole'): TypedContractMethod<
      [user: AddressLike, role: BytesLike, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'executeProposal'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAllProposalIds'): TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getCertificateDetails'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, bigint, boolean, string] & {owner: string, mintedAt: bigint, revoked: boolean, uri: string }],
      'view'
    >;
getFunction(nameOrSignature: 'getPendingProposals'): TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getProposal'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[bigint, string, string, string, string, string, bigint, bigint, boolean, boolean] & {id: bigint, proposer: string, recipient: string, recipientName: string, grade: string, metadataURI: string, approvalCount: bigint, createdAt: bigint, executed: boolean, cancelled: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getProposalApprovers'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getProposalCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleMemberCount'): TypedContractMethod<
      [role: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleMembers'): TypedContractMethod<
      [role: BytesLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalMinted'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getUserRoles'): TypedContractMethod<
      [account: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasApproved'): TypedContractMethod<
      [proposalId: BigNumberish, approver: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isAdmin'): TypedContractMethod<
      [account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isRevoked'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mintCertificate'): TypedContractMethod<
      [recipient: AddressLike, _tokenURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'proposalApprovals'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'proposalApprovers'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'proposals'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, string, string, string, bigint, bigint, boolean, boolean] & {proposalId: bigint, proposer: string, recipient: string, recipientName: string, grade: string, metadataURI: string, approvalCount: bigint, createdAt: bigint, executed: boolean, cancelled: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestRole'): TypedContractMethod<
      [role: BytesLike, justification: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeApproval'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeCertificate'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalThreshold'): TypedContractMethod<
      [newThreshold: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifyCertificate'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'ApprovalRevoked'): TypedContractEvent<ApprovalRevokedEvent.InputTuple, ApprovalRevokedEvent.OutputTuple, ApprovalRevokedEvent.OutputObject>;
getEvent(key: 'BatchMetadataUpdate'): TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
getEvent(key: 'CertificateMinted'): TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
getEvent(key: 'CertificateRevoked'): TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
getEvent(key: 'EmergencyRoleRevoked'): TypedContractEvent<EmergencyRoleRevokedEvent.InputTuple, EmergencyRoleRevokedEvent.OutputTuple, EmergencyRoleRevokedEvent.OutputObject>;
getEvent(key: 'MetadataUpdate'): TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'ProposalApproved'): TypedContractEvent<ProposalApprovedEvent.InputTuple, ProposalApprovedEvent.OutputTuple, ProposalApprovedEvent.OutputObject>;
getEvent(key: 'ProposalCancelled'): TypedContractEvent<ProposalCancelledEvent.InputTuple, ProposalCancelledEvent.OutputTuple, ProposalCancelledEvent.OutputObject>;
getEvent(key: 'ProposalCreated'): TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
getEvent(key: 'ProposalExecuted'): TypedContractEvent<ProposalExecutedEvent.InputTuple, ProposalExecutedEvent.OutputTuple, ProposalExecutedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRequested'): TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'ThresholdChanged'): TypedContractEvent<ThresholdChangedEvent.InputTuple, ThresholdChangedEvent.OutputTuple, ThresholdChangedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'ApprovalRevoked(uint256,address,uint256)': TypedContractEvent<ApprovalRevokedEvent.InputTuple, ApprovalRevokedEvent.OutputTuple, ApprovalRevokedEvent.OutputObject>;
      ApprovalRevoked: TypedContractEvent<ApprovalRevokedEvent.InputTuple, ApprovalRevokedEvent.OutputTuple, ApprovalRevokedEvent.OutputObject>;
    

      'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
      BatchMetadataUpdate: TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
    

      'CertificateMinted(uint256,address,string)': TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
      CertificateMinted: TypedContractEvent<CertificateMintedEvent.InputTuple, CertificateMintedEvent.OutputTuple, CertificateMintedEvent.OutputObject>;
    

      'CertificateRevoked(uint256,address)': TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
      CertificateRevoked: TypedContractEvent<CertificateRevokedEvent.InputTuple, CertificateRevokedEvent.OutputTuple, CertificateRevokedEvent.OutputObject>;
    

      'EmergencyRoleRevoked(address,address,bytes32,string)': TypedContractEvent<EmergencyRoleRevokedEvent.InputTuple, EmergencyRoleRevokedEvent.OutputTuple, EmergencyRoleRevokedEvent.OutputObject>;
      EmergencyRoleRevoked: TypedContractEvent<EmergencyRoleRevokedEvent.InputTuple, EmergencyRoleRevokedEvent.OutputTuple, EmergencyRoleRevokedEvent.OutputObject>;
    

      'MetadataUpdate(uint256)': TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
      MetadataUpdate: TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'ProposalApproved(uint256,address,uint256)': TypedContractEvent<ProposalApprovedEvent.InputTuple, ProposalApprovedEvent.OutputTuple, ProposalApprovedEvent.OutputObject>;
      ProposalApproved: TypedContractEvent<ProposalApprovedEvent.InputTuple, ProposalApprovedEvent.OutputTuple, ProposalApprovedEvent.OutputObject>;
    

      'ProposalCancelled(uint256,address)': TypedContractEvent<ProposalCancelledEvent.InputTuple, ProposalCancelledEvent.OutputTuple, ProposalCancelledEvent.OutputObject>;
      ProposalCancelled: TypedContractEvent<ProposalCancelledEvent.InputTuple, ProposalCancelledEvent.OutputTuple, ProposalCancelledEvent.OutputObject>;
    

      'ProposalCreated(uint256,address,address,string)': TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
      ProposalCreated: TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
    

      'ProposalExecuted(uint256,uint256,address)': TypedContractEvent<ProposalExecutedEvent.InputTuple, ProposalExecutedEvent.OutputTuple, ProposalExecutedEvent.OutputObject>;
      ProposalExecuted: TypedContractEvent<ProposalExecutedEvent.InputTuple, ProposalExecutedEvent.OutputTuple, ProposalExecutedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRequested(address,bytes32,string)': TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
      RoleRequested: TypedContractEvent<RoleRequestedEvent.InputTuple, RoleRequestedEvent.OutputTuple, RoleRequestedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'ThresholdChanged(uint256,uint256,address)': TypedContractEvent<ThresholdChangedEvent.InputTuple, ThresholdChangedEvent.OutputTuple, ThresholdChangedEvent.OutputObject>;
      ThresholdChanged: TypedContractEvent<ThresholdChangedEvent.InputTuple, ThresholdChangedEvent.OutputTuple, ThresholdChangedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }